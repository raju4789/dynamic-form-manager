name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      job_to_run:
        description: "Specify the job to run (e.g., build-and-test, frontend, docker-build, upload-reports, danger)"
        required: false
        default: "all"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'build-and-test' }}

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK for backend
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build and run unit tests for backend
      - name: Build and run unit tests
        run: |
          cd backend
          ./mvnw clean install -P unit-tests

      # Step 5: Run Cucumber integration tests for backend
      - name: Run Cucumber integration tests
        run: |
          cd backend
          ./mvnw verify -P integration-tests

  frontend:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'frontend' }}

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Cache Node.js dependencies
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Build and test the frontend
      - name: Build and test frontend
        run: |
          cd ui
          npm install
          npm run build
          npm test

  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, frontend]
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'docker-build' }}

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Docker Compose and Build Docker images
      - name: Install Docker Compose and Build Docker images
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose -f backend/docker-compose.yml build

  upload-reports:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'upload-reports' }}

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Upload Cucumber Reports
      - name: Upload Cucumber Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cucumber-report
          path: backend/target/cucumber-report.json

  danger:
    runs-on: ubuntu-latest
    needs: [build-and-test, frontend]
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.job_to_run == 'all' || github.event.inputs.job_to_run == 'danger' }}

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Run Danger.js for Pull Request Summarization
      - name: Run Danger.js
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install --save-dev danger
          npx danger ci