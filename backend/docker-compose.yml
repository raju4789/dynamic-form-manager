version: '3.8'

services:
  # MySQL Service
  mysql:
    image: mysql:8.0
    container_name: mysql_container
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "root$password" # Root password for MySQL
      MYSQL_DATABASE: finclutech_db # Default database
      MYSQL_USER: admin # MySQL user
      MYSQL_PASSWORD: "admin@2025" # MySQL user password
    ports:
      - "3306:3306" # Expose MySQL on port 3306
    volumes:
      - mysql_data:/var/lib/mysql # Persist MySQL data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-p$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 3

  # phpMyAdmin Service
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin_container
    restart: always
    environment:
      PMA_HOST: mysql # Service name of the MySQL container
      PMA_PORT: 3306
    ports:
      - "8082:80" # Access phpMyAdmin on http://localhost:8082
    depends_on:
      - mysql
    networks:
      - app_network

  # MongoDB Service
  mongodb:
    image: mongo:5.0
    container_name: mongodb_container
    restart: always
    ports:
      - "27017:27017" # Expose MongoDB on port 27017
    volumes:
      - mongodb_data:/data/db # Persist MongoDB data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Mongo Express Service
  mongo-express:
    image: mongo-express
    container_name: mongo_express_container
    restart: always
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb # Service name of the MongoDB container
      ME_CONFIG_MONGODB_PORT: 27017
    ports:
      - "8081:8081" # Access Mongo Express on http://localhost:8081
    depends_on:
      - mongodb
    networks:
      - app_network

  # Spring Boot Service
#  spring-boot-app:
#    build:
#      context: . # Use the current directory as the build context
#      dockerfile: Dockerfile # Specify the Dockerfile to use
#    container_name: spring_boot_container
#    restart: always
#    ports:
#      - "8080:8080" # Expose Spring Boot on port 8080
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/finclutech_db
#      SPRING_DATASOURCE_USERNAME: admin
#      SPRING_DATASOURCE_PASSWORD: admin@2025
#      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/finclutech_db
#    depends_on:
#      - mysql
#      - mongodb
#    networks:
#      - app_network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.82.0
    restart: always
    command:
      - --config=/etc/otelcol-cont/otel-collector.yml
    volumes:
      - ./docker/collector/otel-collector.yml:/etc/otelcol-cont/otel-collector.yml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "55679:55679" # zpages extension

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yml
    ports:
      - "3200:3200"   # tempo
      - "4317"  # otlp grpc

  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"

volumes:
  mysql_data: # Volume for MySQL data persistence
  mongodb_data: # Volume for MongoDB data persistence

networks:
  app_network: # Custom network for container communication