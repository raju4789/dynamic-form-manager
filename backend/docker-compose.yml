version: '3.8'

services:
  # MySQL Service
  mysql:
    image: mysql:8.0
    container_name: mysql_container
    restart: always
    ports:
      - "3306:3306" # Expose MySQL on port 3306
    volumes:
      - mysql_data:/var/lib/mysql # Persist MySQL data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-p$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 3

  # phpMyAdmin Service
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin_container
    restart: always
    environment:
      PMA_HOST: mysql # Service name of the MySQL container
      PMA_PORT: 3306
    ports:
      - "8082:80" # Access phpMyAdmin on http://localhost:8082
    depends_on:
      - mysql
    networks:
      - app_network

  # MongoDB Service
  mongodb:
    image: mongo:5.0
    container_name: mongodb_container
    restart: always
    ports:
      - "27017:27017" # Expose MongoDB on port 27017
    volumes:
      - mongodb_data:/data/db # Persist MongoDB data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Mongo Express Service
  mongo-express:
    image: mongo-express
    container_name: mongo_express_container
    restart: always
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb # Service name of the MongoDB container
      ME_CONFIG_MONGODB_PORT: 27017
    ports:
      - "8081:8081" # Access Mongo Express on http://localhost:8081
    depends_on:
      - mongodb
    networks:
      - app_network

  # backend-service
  dynamic-form-manager:
    build:
      context: . # Use the current directory as the build context
      dockerfile: Dockerfile # Specify the Dockerfile to use
    container_name: dynamic_form_manager_container
    restart: always
    ports:
      - "8080:8080" # Expose Spring Boot on port 8080
    depends_on:
      - mysql
      - mongodb
      - tempo
      - loki
      - prometheus
      - vault
    networks:
      - app_network

  # Prometheus Service
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app_network

  ## Tempo Service
  tempo:
    image: grafana/tempo
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
      - ./docker/tempo/tempo-data:/tmp/tempo
    ports:
      - "3200:3200" # Tempo
      - "9411:9411" # zipkin
    networks:
        - app_network

  #loki Service
  loki:
    image: grafana/loki:main
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
    networks:
        - app_network

  # Grafana Service
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    networks:
      - app_network

  # Vault Service
  vault:
    image: hashicorp/vault:1.18.3 # Use a specific version of Vault
    container_name: vault_container
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "root"
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
      VAULT_LOCAL_CONFIG: |
        {
          "ui": true
        }
    cap_add:
      - IPC_LOCK
    networks:
        - app_network

volumes:
  mysql_data: # Volume for MySQL data persistence
  mongodb_data: # Volume for MongoDB data persistence

networks:
  app_network: # Custom network for container communication
    driver: bridge